pic (0).png
png (0).jpg    The very first image(s) I made. (Technically no, but whatever.)
pic (0).ppm    Very fast runtime. (~36 ms)


pic (1)        The simple sphere on top of the background of the previous image
               where the color depends on the position of the point on the sphere.
               Reasonable runtime.

pic (2)        Same thing, but with a "ground." Also implemented all sorts of Hittable
               stuff. (Abstract base class, etc.) Also implemented anti-aliasing so that
               the edges don't look too jagged. Runtime tanked after making 100 samples
               to properly get the anti-aliased image. (~1 min.)

pic (3)        Made it look like a sphere made of some diffuse material. Dark because of
               lack of gamma correction. Runtime tanked after rays were being reflected
               and stuff. (~20 mins.)

pic (4)        (Tried to) add some gamma correction. Don't know what went wrong. (Same
               runtime as before. ~20 mins.)

pic (5)        Fixed the error in the gamma correction. (~18 mins, more or less same as
               before.)

pic (6)        Added a tolerance to fix the shadow acne. Runtime decreased by an insane
               amount (~10x). Runtime was 1 min 50 secs. (~2 mins, whereas it was ~18 mins
               before.)

pic (7)        Changed the way that random points in the unit sphere are picked (using the
               rejection method from the book) to see if it affects the shadow shape. It
               does.)

pic (8)        Same as before but I was using an undefined function before, so I fixed that.

pic (9)        Reverted back to the spherical coordinates method, and generated a reasonably
               similar image to the previous incarnation, implying that there was some RNG
               trickery going on before, with the ovular shadow appearing.

pic (10)       Implemented lambertian and metal materials and used them in the scene. Runtime
               is unknown (I didn't bother finding out.))

pic (11)       After many short debugging rounds and building GCC 12, I got this semi-reason-
               able picture. Runtime was 2 mins.

pic (12)       Picture is almost fixed, but is upside down for some reason. Didn't bother
               checking the runtime.

pic (13)       Everything is fixed and working. Runtime is ~2 mins. (On Release mode, it's
               ~1 min.)

pic (14)       Implemented fuzzy reflection in the metal material.

pic (15)       Implemented the dielectric material and made one of the spheres a glass sphere.

pic (16)       Implemented a customiazble vertical FOV. Runtime was ~73 seconds. Runtime seems
               to be heavily dependent on background workload.

               I'm stupid. The scene is much simpler, so the lower runtime is due to that.

pic (17)       Implemented arbitrary lookat and lookfrom, and used those new features in the
               scene.

pic (18)       Changed the vertical FOV and made a new image.

pic (19)       Implemented a customizable depth of field and made a new image. Runtime is ~3
               mins.

pic (20)       Tried to make the final render happen. I reduced the size to 1280 x 720, and
               kept the number of samples as 100 even though the book uses 500. The program
               took 27 minutes to run, and produced this garbage. I don't know what the error
               is.

pic (21)       Same garbage, but I changed the build type to release and upped the number of
               samples to 500. Runtime was ~35 mins.

pic (22)       Finally works! Runtime was ~32 mins. I used 500 samples, and the dimensions
               were the full 1280 x 720. Time to implement some optimizations.
			   
pic (23)       Made a full sized 1920 x 1080p image. Runtime was 75 mins. Same number of
               samples as last time.
